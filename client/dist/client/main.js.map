{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/auth.guard.ts","./src/app/auth.service.ts","./src/app/card-dialog/card-dialog.component.ts","./src/app/card-dialog/card-dialog.component.html","./src/app/db.service.ts","./src/app/edit-card-dialog/edit-card-dialog.component.ts","./src/app/edit-card-dialog/edit-card-dialog.component.html","./src/app/edit-member-dialog/edit-member-dialog.component.ts","./src/app/edit-member-dialog/edit-member-dialog.component.html","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/app/log/log.component.ts","./src/app/log/log.component.html","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/member-dialog/member-dialog.component.ts","./src/app/member-dialog/member-dialog.component.html","./src/app/member/member.component.ts","./src/app/member/member.component.html","./src/app/navi/navi.component.ts","./src/app/navi/navi.component.html","./src/app/nfc/nfc.component.ts","./src/app/nfc/nfc.component.html","./src/app/register/register.component.ts","./src/app/register/register.component.html","./src/app/status-list/status-list.component.ts","./src/app/status-list/status-list.component.html","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { NfcComponent } from './nfc/nfc.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { HomeComponent } from './home/home.component';\nimport { MemberComponent } from './member/member.component';\nimport { AuthGuard } from './auth.guard';\nimport { StatusListComponent } from './status-list/status-list.component';\nimport { LogComponent } from './log/log.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'home', pathMatch: 'full' },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'home', \n    component: HomeComponent,\n    canActivate: [AuthGuard],\n    children:[\n      { path: 'member', component: MemberComponent },\n      { path: 'statusList', component: StatusListComponent },\n      { path: 'log', component: LogComponent }\n    ]\n  },\n  { path: 'nfc', component: NfcComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'client';\n}\n","<router-outlet></router-outlet>","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n/* Material */\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatProgressSpinnerModule, MatSpinner } from '@angular/material/progress-spinner';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatPaginatorModule } from '@angular/material/paginator';\n\n\n/* Component */\nimport { AppComponent } from './app.component';\nimport { NfcComponent } from './nfc/nfc.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { HomeComponent } from './home/home.component';\nimport { MemberComponent } from './member/member.component';\nimport { NaviComponent } from './navi/navi.component';\nimport { MemberDialogComponent } from './member-dialog/member-dialog.component';\nimport { EditMemberDialogComponent } from './edit-member-dialog/edit-member-dialog.component';\nimport { StatusListComponent } from './status-list/status-list.component';\nimport { LogComponent } from './log/log.component';\nimport { CardDialogComponent } from './card-dialog/card-dialog.component';\nimport { EditCardDialogComponent } from './edit-card-dialog/edit-card-dialog.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NfcComponent,\n    LoginComponent,\n    RegisterComponent,\n    HomeComponent,\n    MemberComponent,\n    NaviComponent,\n    MemberDialogComponent,\n    EditMemberDialogComponent,\n    StatusListComponent,\n    LogComponent,\n    CardDialogComponent,\n    EditCardDialogComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    FlexLayoutModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatIconModule,\n    MatButtonToggleModule,\n    MatAutocompleteModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatListModule,\n    MatMenuModule,\n    MatSlideToggleModule,\n    MatTableModule,\n    MatDialogModule,\n    MatSelectModule,\n    MatSortModule,\n    MatPaginatorModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree, Router} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\nimport { map } from 'rxjs/operators'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return this.authService.isAuthenticated()\n    .pipe(\n      map(result => {\n        if(!result){\n          this.router.navigate(['login']);\n        }\n        return result;\n      })\n    );\n  }\n  \n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { user } from './models/user';\nimport { Observable, of} from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { shareReplay, catchError} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n    //withCredentials: true\n  };\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  login(user: user): Observable<boolean>{\n    return this.http.post<user>('/auth/login', user, this.httpOptions)\n    .pipe(\n      map(result =>{\n        if(result){\n          return true;\n        }\n        else{\n          return false;\n        }\n      }),\n      catchError(this.handleError<boolean>(false)),\n      shareReplay(1)\n    );\n  }\n\n  isAuthenticated(): Observable<boolean> {\n    return this.http.get<boolean>('/auth/check', this.httpOptions)\n    .pipe(\n      map(result => {\n        if(result){\n          return true;\n        }\n        else{\n          return false;\n        }\n      }),\n      catchError(this.handleError<boolean>(false))\n    );\n  }\n\n  logout(): Observable<string>{\n    return this.http.get<string>('/auth/logout', this.httpOptions)\n    .pipe(\n      catchError(this.handleError<string>('logout failed'))\n    );\n  }\n\n  handleError<T>(result?: T) {\n    return (error: any): Observable<T> => {\n      console.log(error);\n      return of(result as T);\n    }\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { DbService } from '../db.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { card } from '../models/card';\nimport { member } from '../models/member';\nimport { NFCPortLib, Configuration, DetectionOption } from 'nfc-module';\n\n@Component({\n  selector: 'app-card-dialog',\n  templateUrl: './card-dialog.component.html',\n  styleUrls: ['./card-dialog.component.scss']\n})\nexport class CardDialogComponent implements OnInit {\n  card: card = {\n    idm: '',\n    id: 0,\n    enable: true,\n    expire: '',\n    remark: ''\n  }\n  scanStatus: number = 0;\n  terminate: boolean = false;\n  members: member[] = [];\n  form!: FormGroup;\n  idmControl = new FormControl(null, Validators.required);\n  idControl = new FormControl(null, Validators.required);\n  enableControl = new FormControl(true);\n  remarkControl = new FormControl(null);\n\n\n  constructor(\n    public dialogRef: MatDialogRef<CardDialogComponent>,\n    private fb: FormBuilder,\n    private dbService: DbService,\n    private snackBar: MatSnackBar,\n  ) { }\n\n  ngOnInit(): void {\n    this.getMembers();\n    this.form = this.fb.group({\n      idm: this.idmControl,\n      id: this.idControl,\n      enable: this.enableControl,\n      remark: this.remarkControl,\n    });\n  }\n\n  getMembers(): void {\n    this.dbService.getAll<member>('members')\n    .subscribe(members => this.members = members);\n  }\n\n  onCancel(): void {\n    this.terminate = true;\n    this.dialogRef.close();\n  }\n\n  onSubmit(): void {\n    this.card.id = this.form.get('id')?.value;\n    this.card.remark = this.form.get('remark')?.value;\n    this.card.enable = this.form.get('enable')?.value;\n     /* Expired after 5 yeas */\n    let now = new Date();\n    this.card.expire = new Date(now.setFullYear(now.getFullYear() + 5)).toString();\n    this.dbService.add<card>('card', this.card)\n    .subscribe(result => {\n      if(result){\n        this.dialogRef.close();\n      }\n      else{\n        this.snackBar.open('登録できませんでした', '閉じる', {duration: 7000});\n      }\n    });\n\n  }\n\n  onScan(): void {\n    this.scanStatus = 1;\n    this.felica_card()\n    .then(() => {\n      this.scanStatus = 2;\n    });\n\n  }\n\n  async felica_card() {\n\t\tconsole.log('[Reading a FeliCa Card] Begin');\n\n\t\tlet lib : any;\n   \n\t\ttry {\n\t\t\t/* create NFCPortLib object */\n\t\t\tlib = new NFCPortLib();\n\n\t\t\t/* init() */\n\t\t\tlet config = new Configuration(500 /* ackTimeout */, 500 /* receiveTimeout */, true /* autoBaudRate*/, true /* autoDeviceSelect */);\n\t\t\tawait lib.init(config);\n\n\t\t\t/* open() */\n\t\t\tawait lib.open();\n\t\t\tconsole.log('deviceName : ' + lib.deviceName);\n\n\t\t\t/* detectCard (FeliCa Card) */\n\t\t\tlet detectOption = new DetectionOption(new Uint8Array([0xff, 0xff]), 0, true, false, null);\n\t\t\twhile(this.card.idm===''){\n        if(this.terminate){\n          break;\n        }\n        await lib.detectCard('iso18092', detectOption)\n          .then((ret: { systemCode: null; idm: any; pmm: any; }) => {\n          if (ret.systemCode == null) {\n            console.log('IDm : ' + this._array_tohexs(ret.idm) +\n                  '\\nPMm : ' + this._array_tohexs(ret.pmm) +\n                  '\\ntargetCardBaudRate : ' + lib.targetCardBaudRate + 'kbps');\n          } else {\n            console.log('IDm : ' + this._array_tohexs(ret.idm) +\n                  '\\nPMm : ' + this._array_tohexs(ret.pmm) +\n                  '\\nSystemCode : ' + this._array_tohexs(ret.systemCode) +\n                  '\\ntargetCardBaudRate : ' + lib.targetCardBaudRate + 'kbps');\n          }\n          this.card.idm = this._array_tohexs(ret.idm);\n        }, (error: any) => {\n          console.log('retry');\n        });\n      }\n\n\t\t\t/* close() */\n\t\t\tawait lib.close();\n\t\t\tlib = null;\n\n\t\t\tconsole.log('Success');\n\n\t\t} catch(error: any) {\n\t\t\tconsole.log('Error errorType : ' + error.errorType);\n\t\t\tconsole.log('      message : ' + error.message);\n\n\t\t\tif (lib != null) {\n\t\t\t\tawait lib.close();\n\t\t\t\tlib = null;\n\t\t\t}\n\t\t}\n\n\t\tconsole.log('[Reading a FeliCa Card] End');\n\t\treturn;\n\t}\n\n\t_def_val(param: undefined | string | number, def: string | number)\n\t{\n\t\treturn (param === undefined) ? def : param;\n\t}\n\n\t_array_slice(array: string | any[] | Uint8Array, offset: number, length: any)\n\t{\n\t\tlet result: never[];\n\n\t\tlength = this._def_val(length, array.length - offset);\n\t\tresult = [];\n\t\tthis._array_copy(result, 0, array, offset, length);\n\t\t\n\t\treturn result;\n\t}\n\n\t_bytes2hexs(bytes: any[], sep: string) {\n\t\tlet str;\n\n\t\tlet str_num: any = this._def_val(sep, ' ');\n\n\t\treturn bytes.map(function(byte: number) {\n\t\t\tstr = byte.toString(16);\n\t\t\treturn byte < 0x10 ? '0'+str : str;\n\t\t}).join(str_num).toUpperCase();\n\t}\n\n\t_array_tohexs(array: string | any[] | Uint8Array, offset?: number, length?: undefined)\n\t{\n\t\tlet temp;\n\n\t\tlet offset2:any;\n    let length2: any;\n\n    offset2 = this._def_val(offset, 0);\n    if(typeof offset2 === 'number'){\n\t\t  length2 = this._def_val(length, array.length - offset2);\n    }\n\n\t\ttemp = this._array_slice(array, offset2, length2 );\n\t\treturn this._bytes2hexs(temp, '');\n\t}\n\n\t_array_copy(dest: any[] | Uint8Array, dest_offset: number, src: string | any[] | Uint8Array, src_offset: number, length: number)\n\t{\n\t\tlet idx;\n    let src_offset2: any;\n    let length2: any;\n\n\t\tsrc_offset2 = this._def_val(src_offset, 0);\n\t\tlength2 = this._def_val(length, src.length);\n\n\t\tfor (idx = 0; idx < length2; idx++) {\n\t\t\tdest[dest_offset + idx] = src[src_offset2 + idx];\n\t\t}\n\n\t\treturn dest;\n\t}\n\n\n}\n","<h2 mat-dialog-title>カード登録</h2>\n<div mat-dialog-content>\n    <div fxLayout=\"column\" fxLayoutAlign=\"space-around center\" class=\"nfc\">\n        <div *ngIf=\"scanStatus==0\"><mat-icon class=\"nfc-icon\" color=\"accent\">nfc</mat-icon></div>\n        <div *ngIf=\"scanStatus==1\"><mat-spinner diameter=\"60\" color=\"accent\"></mat-spinner></div>\n        <div *ngIf=\"scanStatus==2\"><mat-icon class=\"nfc-icon\" color=\"accent\">done</mat-icon></div>\n    \n        <button mat-raised-button color=\"accent\" [autofocus]=\"false\" type=\"button\" (click)=\"onScan()\" [disabled]=\"scanStatus==1\">スキャン</button>\n    </div>\n    <form class=\"example-form\" [formGroup]=\"form\" novalidate (ngSubmit)=\"onSubmit()\">\n        <mat-card-content>\n        <div fxLayout=\"column\" fxLayoutAlign=\"space-around\">\n\n            <mat-form-field class=\"example-full-width\">\n                <input matInput placeholder=\"IDm\" name=\"idm\" [(ngModel)]=\"card.idm\" formControlName=\"idm\" readonly>\n                <mat-error *ngIf=\"idmControl.hasError('required')\">\n                    <strong>カードをスキャンしてください</strong>\n                </mat-error>\n            </mat-form-field>\n\n            <mat-form-field class=\"example-full-width\">\n            <mat-label>紐づけ先</mat-label>\n            <mat-select [formControl]=\"idControl\">\n                <mat-option>--</mat-option>\n                <mat-option *ngFor=\"let member of members\" [value]=\"member.id\">\n                {{member.name}}\n                </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"idControl.hasError('required')\">\n                <strong>紐づけ先を選択してください</strong>\n            </mat-error>\n            </mat-form-field>\n\n            <!--<mat-form-field class=\"example-full-width\">-->\n               <mat-slide-toggle formControlName=\"enable\">有効</mat-slide-toggle>\n            <!--</mat-form-field>-->\n\n            <mat-form-field class=\"example-full-width\">\n                <mat-label>備考</mat-label>\n                <textarea matInput name=\"remark\" formControlName=\"remark\"></textarea>\n            </mat-form-field>\n        </div>\n        </mat-card-content>\n        <span fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n        <button mat-button type=\"button\" (click)=\"onCancel()\">キャンセル</button>\n        <button mat-raised-button class=\"btn-block\" color=\"accent\" type=\"submit\" [disabled]=\"form.invalid\">カード登録</button>\n        </span>\n    </form>\n\n\n</div>","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, shareReplay } from 'rxjs/operators';\nimport { user } from './models/user'; \n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DbService {\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n  };\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  createUser(user: user): Observable<any>{\n    return this.http.post('db/user', user, this.httpOptions)\n    .pipe(\n      catchError(this.handleError<any>(null)),\n      shareReplay(1)\n    );\n  }\n\n  userExist(email: string): Observable<boolean> {\n    return this.http.post<boolean>('db/user/exist', JSON.stringify({\"email\": email}), this.httpOptions)\n    .pipe(\n      map(result => {\n        if(result){\n          return true;\n        }\n        else{\n          return false;\n        }\n      }),\n      catchError(this.handleError<boolean>(false))\n    );\n  }\n\n  get<T>(kind: string, id: number | string): Observable<T> {\n    const url = `db/${kind}/${id}`;\n    return this.http.get<T>(url, this.httpOptions)\n    .pipe(\n      catchError(this.handleError<T>())\n    );\n  }\n\n  getAll<T>(kind: string): Observable<T[]> {\n    const url = `db/${kind}`;\n    return this.http.get<T[]>(url, this.httpOptions)\n    .pipe(\n      catchError(this.handleError<T[]>([]))\n    );\n  }\n\n  add<T>(kind: string, data: T): Observable<boolean> {\n    const url = `db/${kind}`;\n    return this.http.post<T>(url, data, this.httpOptions)\n    .pipe(\n      map(result => {\n        if(result){\n          return true;\n        }\n        else{\n          return false;\n        }\n      }),\n      catchError(this.handleError<boolean>(false))\n    );\n  }\n\n  update<T>(kind: string, data: T): Observable<boolean> {\n    const url = `db/${kind}`;\n    return this.http.put<T>(url, data, this.httpOptions)\n    .pipe(\n      map(result => {\n        if(result){\n          return true;\n        }\n        else{\n          return false;\n        }\n      }),\n      catchError(this.handleError<boolean>(false))\n    );\n  }\n  \n\n  private handleError<T>(result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error);\n      return of(result as T);\n    };\n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DbService } from '../db.service';\nimport { member } from '../models/member';\nimport { card } from '../models/card';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-edit-card-dialog',\n  templateUrl: './edit-card-dialog.component.html',\n  styleUrls: ['./edit-card-dialog.component.scss']\n})\nexport class EditCardDialogComponent implements OnInit {\n  members: member[] = []; \n  card: card = {\n    idm: '',\n    id: 0,\n    enable: true,\n    expire: '',\n    remark: ''\n  }\n  form!: FormGroup;\n  idmControl = new FormControl(null, Validators.required);\n  idControl = new FormControl(null, Validators.required);\n  enableControl = new FormControl(true);\n  remarkControl = new FormControl(null);\n\n\n  constructor(\n    public dialogRef: MatDialogRef<EditCardDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public idm: string,\n    private dbService: DbService,\n    private fb: FormBuilder,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit(): void {\n    this.getCard(this.idm);\n    this.form = this.fb.group({\n      idm: this.idmControl,\n      id: this.idControl,\n      enable: this.enableControl,\n      remark: this.remarkControl,\n    });\n  }\n\n  getCard(idm: string): void {\n    this.dbService.get<card>('card', idm)\n    .subscribe(card => {\n      this.card = card;\n      this.dbService.getAll<member>('members')\n      .subscribe(members => {\n        this.members = members;\n        this.enableControl.setValue(this.card.enable);\n      })\n    })\n  }\n\n  onSave(): void {\n    this.card.enable = this.form.get('enable')?.value;\n    this.dbService.update<card>('card', this.card)\n    .subscribe(result => {\n      if(result){\n        this.dialogRef.close();\n      }\n      else{\n        this.snackBar.open('更新できませんでした', '閉じる', {duration: 7000});\n      }\n    });\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n\n}\n","<h2 mat-dialog-title>カード編集</h2>\n<div mat-dialog-content>\n    <form class=\"example-form\" [formGroup]=\"form\" novalidate (ngSubmit)=\"onSave()\">\n        <mat-card-content>\n        <div fxLayout=\"column\" fxLayoutAlign=\"space-around\">\n\n            <mat-form-field class=\"example-full-width\">\n                <input matInput placeholder=\"IDm\" name=\"idm\" [(ngModel)]=\"card.idm\" formControlName=\"idm\" readonly>\n                <mat-hint>IDmは編集できません</mat-hint>\n            </mat-form-field>\n\n            <!--<mat-form-field class=\"example-full-width\">\n                <input matInput placeholder=\"紐づけ先\" name=\"id\" [(ngModel)]=\"member.name\" formControlName=\"id\" readonly>\n                <mat-hint>紐づけ先は編集できません</mat-hint>\n            </mat-form-field>-->\n            <mat-form-field class=\"example-full-width\">\n                <mat-label>紐づけ先</mat-label>\n                <mat-select [formControl]=\"idControl\" [(ngModel)]=\"card.id\">\n                    <mat-option>--</mat-option>\n                    <mat-option *ngFor=\"let member of members\" [value]=\"member.id\">\n                        {{member.name}}\n                    </mat-option>\n                </mat-select>\n                <mat-error *ngIf=\"idControl.hasError('required')\">\n                    <strong>紐づけ先を選択してください</strong>\n                </mat-error>\n            </mat-form-field>\n    \n\n            <!--<mat-form-field class=\"example-full-width\">-->\n               <mat-slide-toggle formControlName=\"enable\">有効</mat-slide-toggle>\n            <!--</mat-form-field>-->\n\n            <mat-form-field class=\"example-full-width\">\n                <mat-label>備考</mat-label>\n                <textarea matInput name=\"remark\" [(ngModel)]=\"card.remark\" formControlName=\"remark\"></textarea>\n            </mat-form-field>\n        </div>\n        </mat-card-content>\n        <span fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n        <button mat-button type=\"button\" (click)=\"onCancel()\">キャンセル</button>\n        <button mat-raised-button class=\"btn-block\" color=\"accent\" type=\"submit\" [disabled]=\"form.invalid\">更新</button>\n        </span>\n    </form>\n\n\n</div>","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DbService } from '../db.service';\nimport { member } from '../models/member';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-edit-member-dialog',\n  templateUrl: './edit-member-dialog.component.html',\n  styleUrls: ['./edit-member-dialog.component.scss']\n})\nexport class EditMemberDialogComponent implements OnInit {\n  member: member = {\n    id: 0,\n    name: '',\n    lastname: '',\n    firstname: '',\n    company: '',\n    attendance: false,\n    initial: true\n  }\n  form!: FormGroup;\n  idControl = new FormControl(null, Validators.required);\n  nameControl = new FormControl(null, Validators.required);\n  lastnameControl = new FormControl(null);\n  firstnameControl = new FormControl(null);\n  companyControl = new FormControl(null);\n\n  constructor(\n    public dialogRef: MatDialogRef<EditMemberDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public id: number,\n    private dbService: DbService,\n    private fb: FormBuilder,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit(): void {\n    this.getMember(this.id);\n    this.form = this.fb.group({\n      id: this.idControl,\n      name: this.nameControl,\n      lastname: this.lastnameControl,\n      firstname: this.firstnameControl,\n      company: this.companyControl\n    });\n  }\n\n  getMember(id: number): void {\n    this.dbService.get<member>('member', id)\n    .subscribe(member => this.member = member)\n  }\n\n  onSave(): void {\n    this.dbService.update<member>('member', this.member)\n    .subscribe(result => {\n      if(result){\n        this.dialogRef.close();\n      }\n      else{\n        this.snackBar.open('更新できませんでした', '閉じる', {duration: 7000});\n      }\n    });\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n","\n<h2 mat-dialog-title>メンバー編集</h2>\n<div mat-dialog-content>\n  <form class=\"example-form\" [formGroup]=\"form\" novalidate (ngSubmit)=\"onSave()\">\n    <mat-card-content>\n      <div fxLayout=\"column\" fxLayoutAlign=\"space-around\">\n        <mat-form-field class=\"example-full-width\">\n            <input matInput placeholder=\"ID\" name=\"id\" type=\"number\" [(ngModel)]=\"member.id\" formControlName=\"id\" readonly>\n            <mat-hint>IDは編集できません</mat-hint>\n        </mat-form-field>\n\n        <mat-form-field class=\"example-full-width\">\n          <input matInput placeholder=\"名前\" name=\"name\" [(ngModel)]=\"member.name\" formControlName=\"name\">\n          <mat-error *ngIf=\"nameControl.hasError('required')\">\n              <strong>名前を入力してください</strong>\n          </mat-error>\n        </mat-form-field>\n\n        <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayOutGap=\"8px\">\n          <mat-form-field class=\"example-full-width\">\n            <input matInput placeholder=\"姓(全角カナ)\" name=\"lastname\" [(ngModel)]=\"member.lastname\" formControlName=\"lastname\">\n          </mat-form-field>\n\n          <mat-form-field class=\"example-full-width\">\n            <input matInput placeholder=\"名(全角カナ)\" name=\"firstname\" [(ngModel)]=\"member.firstname\" formControlName=\"firstname\">\n          </mat-form-field>\n        </div>\n\n        <mat-form-field class=\"example-full-width\">\n          <input matInput placeholder=\"所属\" name=\"company\" [(ngModel)]=\"member.company\" formControlName=\"company\">\n        </mat-form-field>\n      </div>\n    </mat-card-content>\n    <span fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n      <button mat-button type=\"button\" (click)=\"onCancel()\">キャンセル</button>\n      <button mat-raised-button class=\"btn-block\" color=\"accent\" type=\"submit\" [disabled]=\"form.invalid\">更新</button>\n    </span>\n  </form>\n\n\n</div>\n<!--\n<div mat-dialog-actions class=\"dialog-buttons\">\n  <button mat-button (click)=\"onCancel()\">キャンセル</button>\n  <span fxFlexOffset=\"auto\">\n    <button mat-raised-button color=\"primary\" (click)=\"onRegister()\">登録</button>\n  </span>\n</div>-->","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor(\n    private router: Router,\n  ) { }\n\n  ngOnInit(): void {\n    /* Initial display */\n    this.router.navigate(['/home/member']);\n  }\n\n}\n","<app-navi>\n    <router-outlet></router-outlet>\n</app-navi>\n\n","import { Component, OnInit, ViewChild, AfterViewInit} from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { log } from '../models/log';\nimport { DbService } from '../db.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\n\nexport interface displayData {\n  no: number,\n  date: string,\n  time: string,\n  idm: string,\n}\n\n@Component({\n  selector: 'app-log',\n  templateUrl: './log.component.html',\n  styleUrls: ['./log.component.scss']\n})\nexport class LogComponent implements OnInit, AfterViewInit{\n  displayedColumns: string[] = [\n    'no',\n    'date',\n    'time',\n    'idm',\n  ];\n  dataSource = new MatTableDataSource<displayData>();\n\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  constructor(\n    private dbService: DbService,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit(): void {\n    this.getLogs();\n  }\n\n  ngAfterViewInit(): void {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  getLogs(): void {\n    this.dbService.getAll<log>('logs')\n    .subscribe(logs => {\n      if(logs.length === 0){\n        this.snackBar.open('データがありませんでした', '閉じる', {duration: 7000});\n        return;\n      }\n      let displaylogs: displayData[] = [];\n      logs.forEach(log => {\n        displaylogs.push(log);\n      });\n      this.dataSource.data = displaylogs;\n    })\n  }\n\n  onRefresh(): void {\n    this.ngOnInit();\n  }\n\n  onCSVExport(): void {\n\n  }\n\n}\n","<mat-card class=\"data-card\">\n    <mat-card-header class=\"header\">\n        <mat-card-title>ログ</mat-card-title>\n        <span fxLayout=\"row\" fxFlexOffset=\"auto\" fxLayoutGap=\"24px\">\n            <button mat-icon-button color=\"accent\" (click)=\"onRefresh()\"><mat-icon class=\"refresh-icon\">refresh</mat-icon></button>\n            <button mat-raised-button color=\"accent\" (click)=\"onCSVExport()\">CSV出力</button>\n        </span>\n    </mat-card-header>\n    <mat-card-content>\n        <div class=\"mat-elevation-z8\">\n            <table mat-table [dataSource]=\"dataSource\" matSort>\n\n                <!--- Note that these columns can be defined in any order.\n                    The actual rendered columns are set as a property on the row definition\" -->\n            \n                <!-- no Column -->\n                <ng-container matColumnDef=\"no\">\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header>No.</th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.no}} </td>\n                </ng-container>\n\n                <!-- date Column -->\n                <ng-container matColumnDef=\"date\">\n                    <th mat-header-cell *matHeaderCellDef>日付</th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.date}} </td>\n                </ng-container>\n\n                <!-- time Column -->\n                <ng-container matColumnDef=\"time\">\n                    <th mat-header-cell *matHeaderCellDef>時刻</th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.time}} </td>\n                </ng-container>\n\n                <!-- idm Column -->\n                <ng-container matColumnDef=\"idm\">\n                    <th mat-header-cell *matHeaderCellDef>IDm</th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.idm}} </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n            </table>\n            <mat-paginator [pageSizeOptions]=\"[50, 75, 100]\"></mat-paginator>\n        </div>\n    </mat-card-content>\n</mat-card>\n  \n\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { user } from '../models/user';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  user: user = {\n    email: '',\n    password: ''\n  }\n\n  form!: FormGroup;\n  emailControl = new FormControl(null, [\n    Validators.required,\n    Validators.email\n  ]);\n  passwordControl = new FormControl(null, Validators.required);\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private authService: AuthService,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      email: this.emailControl,\n      password: this.passwordControl\n    });\n  }\n\n  onSubmit() {\n    this.user.email = this.form.get('email')?.value; \n    this.user.password = this.form.get('password')?.value;\n    this.authService.login(this.user)\n    .subscribe(result => {\n      if(result){\n        this.router.navigate(['/home']);\n      }\n      else{\n        this.loginFailed();\n      }\n    });\n  }\n\n  loginFailed(): void {\n    this.snackBar.open('ログインできませんでした', '閉じる', { duration: 5000 });\n    //this.form.reset();\n  }\n\n\n}\n","<div class=\"login-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n    <mat-card class=\"box\">\n      <p class=\"img_logo\"></p>\n      <mat-card-header>\n        <mat-card-title>DDLDoor</mat-card-title>\n      </mat-card-header>\n  \n      <form class=\"example-form\" [formGroup]=\"form\" novalidate (ngSubmit)=\"onSubmit()\">\n        <mat-card-content>\n          <mat-form-field class=\"example-full-width\">\n            <input matInput placeholder=\"メールアドレス\" type=\"email\" name=\"email\" formControlName=\"email\">\n            <mat-error *ngIf=\"emailControl.hasError('required') || emailControl.hasError('email')\">\n                <strong>メールアドレスを入力してください</strong>\n            </mat-error>\n          </mat-form-field>\n  \n          <mat-form-field class=\"example-full-width\">\n            <input matInput placeholder=\"パスワード\" type=\"password\" name=\"password\" formControlName=\"password\" autocomplete=\"off\">\n            <mat-error *ngIf=\"passwordControl.hasError('required')\">\n                <strong>パスワードを入力してください</strong>\n            </mat-error>\n          </mat-form-field>\n        </mat-card-content>\n        <!--<span fxLayout=\"row\" fxLayoutAlign=\"space-between center\">-->\n          <!--<a mat-button routerLink=\"/register\" routerLinkActive=\"active\">新規登録</a>-->\n          <button mat-raised-button class=\"btn-block\" color=\"accent\" type=\"submit\" [disabled]=\"form.invalid\">ログイン</button>\n        <!--</span>-->\n      </form>\n      <!--<mat-card-footer class=\"card-footer\">\n        <span fxFlexOffset=\"auto\">\n          <a mat-button routerLink=\"/forgot\">パスワードを再発行</a>\n        </span>\n      </mat-card-footer>-->\n    </mat-card>\n    \n  </div>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { member } from '../models/member';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { DbService } from '../db.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-member-dialog',\n  templateUrl: './member-dialog.component.html',\n  styleUrls: ['./member-dialog.component.scss']\n})\nexport class MemberDialogComponent implements OnInit {\n  member: member = {\n    id: 0,\n    name: '',\n    lastname: '',\n    firstname: '',\n    company: '',\n    attendance: false,\n    initial: true\n  }\n  idOptions: number[] = [...Array(100).keys()].map(i => ++i);\n\n  form!: FormGroup;\n  idControl = new FormControl(null, Validators.required);\n  nameControl = new FormControl(null, Validators.required);\n  lastnameControl = new FormControl(null);\n  firstnameControl = new FormControl(null);\n  companyControl = new FormControl(null);\n\n  constructor(\n    public dialogRef: MatDialogRef<MemberDialogComponent>,\n    private fb: FormBuilder,\n    private dbService: DbService,\n    private snackBar: MatSnackBar,\n    @Inject(MAT_DIALOG_DATA) public usedIds: number[]\n  ) { }\n\n  ngOnInit(): void {\n    this.idOptions = this.idOptions.filter(i => this.usedIds.indexOf(i) === -1);\n    this.form = this.fb.group({\n      id: this.idControl,\n      name: this.nameControl,\n      lastname: this.lastnameControl,\n      firstname: this.firstnameControl,\n      company: this.companyControl\n    });\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n\n  onSubmit(): void {\n    this.member.id = this.form.get('id')?.value;\n    this.member.name = this.form.get('name')?.value;\n    this.member.lastname = this.form.get('lastname')?.value;\n    this.member.firstname = this.form.get('firstname')?.value;\n    this.member.company = this.form.get('company')?.value;\n    this.dbService.add<member>('member', this.member)\n    .subscribe(result => {\n      if(result){\n        this.dialogRef.close();\n      }\n      else{\n        this.snackBar.open('登録できませんでした', '閉じる', {duration: 7000});\n      }\n    })\n  }\n\n}\n","<h2 mat-dialog-title>メンバー登録</h2>\n<div mat-dialog-content>\n  <form class=\"example-form\" [formGroup]=\"form\" novalidate (ngSubmit)=\"onSubmit()\">\n    <mat-card-content>\n      <div fxLayout=\"column\" fxLayoutAlign=\"space-around\">\n        <mat-form-field class=\"example-full-width\">\n          <mat-label>ID</mat-label>\n          <mat-select [formControl]=\"idControl\">\n            <mat-option>--</mat-option>\n            <mat-option *ngFor=\"let id of idOptions\" [value]=\"id\">\n              {{id}}\n            </mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"idControl.hasError('required')\">\n              <strong>IDを選択してください</strong>\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field class=\"example-full-width\">\n          <input matInput placeholder=\"名前\" name=\"name\" formControlName=\"name\">\n          <mat-error *ngIf=\"nameControl.hasError('required')\">\n              <strong>名前を入力してください</strong>\n          </mat-error>\n        </mat-form-field>\n\n        <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayOutGap=\"8px\">\n          <mat-form-field class=\"example-full-width\">\n            <input matInput placeholder=\"姓(全角カナ)\" name=\"lastname\" formControlName=\"lastname\">\n          </mat-form-field>\n\n          <mat-form-field class=\"example-full-width\">\n            <input matInput placeholder=\"名(全角カナ)\" name=\"firstname\" formControlName=\"firstname\">\n          </mat-form-field>\n        </div>\n\n        <mat-form-field class=\"example-full-width\">\n          <input matInput placeholder=\"所属\" name=\"company\" formControlName=\"company\">\n        </mat-form-field>\n      </div>\n    </mat-card-content>\n    <span fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n      <button mat-button type=\"button\" (click)=\"onCancel()\">キャンセル</button>\n      <button mat-raised-button class=\"btn-block\" color=\"accent\" type=\"submit\" [disabled]=\"form.invalid\">登録</button>\n    </span>\n  </form>\n\n\n</div>\n<!--\n<div mat-dialog-actions class=\"dialog-buttons\">\n  <button mat-button (click)=\"onCancel()\">キャンセル</button>\n  <span fxFlexOffset=\"auto\">\n    <button mat-raised-button color=\"primary\" (click)=\"onRegister()\">登録</button>\n  </span>\n</div>-->","import { Component, OnInit } from '@angular/core';\nimport { DbService } from '../db.service';\nimport { member } from '../models/member';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MemberDialogComponent } from '../member-dialog/member-dialog.component';\nimport { EditMemberDialogComponent } from '../edit-member-dialog/edit-member-dialog.component';\n\n\nexport interface displayData {\n  id: number,\n  name: string,\n  lastname: string,\n  firstname: string,\n  company: string\n  status: string  // 在室 or 外室 or 初期状態\n}\n\n\n@Component({\n  selector: 'app-member',\n  templateUrl: './member.component.html',\n  styleUrls: ['./member.component.scss']\n})\nexport class MemberComponent implements OnInit {\n  //members: member[] = [];\n  displayedColumns: string[] = [\n    'id',\n    'name',\n    'lastname',\n    'firstname',\n    'company',\n    'status',\n    'edit'\n  ];\n  dataSource = new MatTableDataSource<displayData>();\n  usedIds: number[] = [];\n\n  constructor(\n    private dbService: DbService,\n    private snackBar: MatSnackBar,\n    public dialog: MatDialog,\n  ) { }\n\n  ngOnInit(): void {\n    this.getMembers();\n  }\n\n  getMembers(): void {\n    this.dbService.getAll<member>('members')\n    .subscribe(members => {\n      if(members.length === 0){\n        this.snackBar.open('データがありませんでした', '閉じる', {duration: 7000});\n        return;\n      }\n      let displayMembers: displayData[] = [];\n      members.forEach(member => {\n        let status: string;\n        if(member.initial){\n          status = '初期状態';\n        }\n        else{\n          if(member.attendance){\n            status = '在室';\n          }\n          else{\n            status = '外室';\n          }\n        }\n        displayMembers.push({\n          id: member.id,\n          name: member.name,\n          lastname: member.lastname,\n          firstname: member.firstname,\n          company: member.company,\n          status: status\n        });\n        this.usedIds.push(member.id);\n      });\n      this.dataSource.data = displayMembers;\n    });\n  }\n\n  onRegister(): void {\n    let dialogRef = this.dialog.open(MemberDialogComponent, {\n      width: '400px',\n      data: this.usedIds\n    });\n    dialogRef.afterClosed().subscribe(() => {\n      this.ngOnInit();\n    });\n  }\n\n  onEdit(id: number): void {\n    let dialogRef = this.dialog.open(EditMemberDialogComponent, {\n      width: '400px',\n      data: id\n    });\n    dialogRef.afterClosed().subscribe(() => {\n      this.ngOnInit();\n    });\n  }\n\n  onRefresh(): void {\n    this.ngOnInit();\n  }\n}\n","<mat-card class=\"data-card\">\n    <mat-card-header class=\"header\">\n        <mat-card-title>メンバー情報</mat-card-title>\n        <span fxLayout=\"row\" fxFlexOffset=\"auto\" fxLayoutGap=\"24px\">\n            <button mat-icon-button color=\"accent\" (click)=\"onRefresh()\"><mat-icon class=\"refresh-icon\">refresh</mat-icon></button>\n            <button mat-raised-button color=\"accent\" (click)=\"onRegister()\">登録</button>\n        </span>\n    </mat-card-header>\n    <mat-card-content>\n        <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n\n            <!--- Note that these columns can be defined in any order.\n                The actual rendered columns are set as a property on the row definition\" -->\n        \n            <!-- id Column -->\n            <ng-container matColumnDef=\"id\">\n                <th mat-header-cell *matHeaderCellDef>ID</th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n            </ng-container>\n\n            <!-- name Column -->\n            <ng-container matColumnDef=\"name\">\n                <th mat-header-cell *matHeaderCellDef>名前</th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n            </ng-container>\n\n            <!-- lastname Column -->\n            <ng-container matColumnDef=\"lastname\">\n                <th mat-header-cell *matHeaderCellDef>姓(全角カナ)</th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.lastname}} </td>\n            </ng-container>\n\n            <!-- firstname Column -->\n            <ng-container matColumnDef=\"firstname\">\n                <th mat-header-cell *matHeaderCellDef>名(全角カナ)</th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.firstname}} </td>\n            </ng-container>\n\n            <!-- company Column -->\n            <ng-container matColumnDef=\"company\">\n                <th mat-header-cell *matHeaderCellDef>所属</th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.company}} </td>\n            </ng-container>\n\n            <!-- status Column -->\n            <ng-container matColumnDef=\"status\">\n                <th mat-header-cell *matHeaderCellDef>状況</th>\n                <td mat-cell *matCellDef=\"let element\">\n                    <span *ngIf=\"element.status=='外室'\" style=\"color: blue;\">{{element.status}}</span>\n                    <span *ngIf=\"element.status=='在室'\" style=\"color: green;\">{{element.status}}</span>\n                    <span *ngIf=\"element.status=='初期状態'\" style=\"color: red;\">{{element.status}}</span>\n                </td>\n            </ng-container>\n\n            <!-- edit Column -->\n            <ng-container matColumnDef=\"edit\">\n                <th mat-header-cell *matHeaderCellDef>編集</th>\n                <td mat-cell *matCellDef=\"let element\">\n                    <button mat-icon-button color=\"primary\" (click)=\"onEdit(element.id)\">\n                        <mat-icon>edit</mat-icon>\n                    </button> \n                </td>\n            </ng-container>\n\n        \n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n    </mat-card-content>\n</mat-card>\n  \n\n","import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { AuthService } from '../auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-navi',\n  templateUrl: './navi.component.html',\n  styleUrls: ['./navi.component.scss']\n})\nexport class NaviComponent {\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n    private authService: AuthService,\n    private router: Router,\n    ) {}\n\n  onLogout(): void {\n    this.authService.logout().subscribe(() => {\n      this.router.navigate(['/login']);\n    });\n  }\n}\n","<mat-sidenav-container class=\"sidenav-container\">\n    <mat-sidenav #drawer class=\"sidenav\" fixedInViewport\n        [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n        [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n        [opened]=\"(isHandset$ | async) === false\">\n      <mat-toolbar>DDLDoor</mat-toolbar>\n      <mat-nav-list>\n        <a mat-list-item [routerLink]=\"['/home/member']\">メンバー情報</a>\n        <a mat-list-item [routerLink]=\"['/home/statusList']\">在外室一覧</a>\n        <a mat-list-item [routerLink]=\"['/home/log']\">ログ</a>\n        <a mat-list-item [routerLink]=\"['/nfc']\">カードID</a>\n      </mat-nav-list>\n    </mat-sidenav>\n    <mat-sidenav-content>\n      <mat-toolbar color=\"primary\">\n        <button\n          type=\"button\"\n          aria-label=\"Toggle sidenav\"\n          mat-icon-button\n          (click)=\"drawer.toggle()\"\n          *ngIf=\"isHandset$ | async\">\n          <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n        </button>\n        <span></span>\n        <span fxFlexOffset=\"auto\">\n          <button\n            type=\"button\"\n            mat-raised-button\n            (click)=\"onLogout()\">\n            ログアウト\n          </button>\n        </span>\n      </mat-toolbar>\n      <ng-content></ng-content>\n    </mat-sidenav-content>\n  </mat-sidenav-container>\n  ","import { Component, OnInit } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DbService } from '../db.service';\nimport { card } from '../models/card';\nimport { member } from '../models/member';\nimport { CardDialogComponent } from '../card-dialog/card-dialog.component';\nimport { EditCardDialogComponent } from '../edit-card-dialog/edit-card-dialog.component';\n\n\nexport interface displayData {\n\tid: number,\n\tname: string,\n\tidm: string,\n\tenable: string, // 有効 or 無効\n\texpire: string, // yyyy/mm/dd\n\tremark: string,\n}\n \n@Component({\n  selector: 'app-nfc',\n  templateUrl: './nfc.component.html',\n  styleUrls: ['./nfc.component.scss']\n})\nexport class NfcComponent implements OnInit {\n\tdisplayedColumns: string[] = [\n\t\t'id',\n\t\t'name',\n\t\t'idm',\n\t\t'enable',\n\t\t'expire',\n\t\t'remark',\n\t\t'edit'\n\t];\n\tdataSource = new MatTableDataSource<displayData>();\n\n\tconstructor(\n\t\tprivate dbService: DbService,\n    \tprivate snackBar: MatSnackBar,\n    \tpublic dialog: MatDialog,\n\t) { \n\t}\n\n\tngOnInit(): void {\n\t\tthis.getCards();\n\t}\n\n\tgetCards(): void {\n\t\tthis.dbService.getAll<card>('cards')\n\t\t.subscribe(cards => {\n\t\t\tif(cards.length === 0){\n\t\t\t\tthis.snackBar.open('データがありませんでした', '閉じる', {duration: 7000});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.dbService.getAll<member>('members')\n\t\t\t.subscribe(members => {\n\n\t\t\t\n\t\t\t\tlet displayCards: displayData[] = [];\n\t\t\t\tcards.forEach(card => {\n\t\t\t\t\tlet enable: string;\n\t\t\t\t\tlet member: member | undefined;\n\t\t\t\t\tif(card.enable){\n\t\t\t\t\t\tenable = '有効';\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tenable = '無効';\n\t\t\t\t\t}\n\t\t\t\t\tmember = members.find(m => m.id === card.id);\n\t\t\t\t\tif(member !== undefined){\n\t\t\t\t\t\tlet expire = new Date(card.expire);\n\t\t\t\t\t\tdisplayCards.push({\n\t\t\t\t\t\t\tidm: card.idm,\n\t\t\t\t\t\t\tid: card.id,\n\t\t\t\t\t\t\tname:  member.name,\n\t\t\t\t\t\t\tenable: enable,\n\t\t\t\t\t\t\texpire: `${expire.getFullYear()}/${('0' + (expire.getMonth() + 1).toString()).slice(-2)}/${('0' + expire.getDay().toString()).slice(-2)}`,\n\t\t\t\t\t\t\tremark: card.remark\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t// nothing\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis.dataSource.data = displayCards;\n\t\t\t});\n\t\t});\n\t}\n\n\tonRefresh(): void {\n\t\tthis.ngOnInit();\n\t}\n\n\tonCardRegister(): void {\n\t\tlet dialogRef = this.dialog.open(CardDialogComponent, {\n\t\t\twidth: '400px',\n\t\t});\n\t\tdialogRef.afterClosed().subscribe(() => {\n\t\t\tthis.ngOnInit();\n\t\t});\n\t}\n\n\tonEdit(idm: string): void {\n\t\tlet dialogRef = this.dialog.open(EditCardDialogComponent, {\n\t\t\twidth: '400px',\n\t\t\tdata: idm\n\t\t});\n\t\tdialogRef.afterClosed().subscribe(() => {\n\t\t\tthis.ngOnInit();\n\t\t});\n\t}\n}\n","<mat-card class=\"data-card\">\n  <mat-card-header class=\"header\">\n      <mat-card-title>カードID</mat-card-title>\n      <span fxLayout=\"row\" fxFlexOffset=\"auto\" fxLayoutGap=\"24px\">\n          <button mat-icon-button color=\"accent\" (click)=\"onRefresh()\"><mat-icon class=\"refresh-icon\">refresh</mat-icon></button>\n          <button mat-raised-button color=\"accent\" (click)=\"onCardRegister()\">カード登録</button>\n      </span>\n  </mat-card-header>\n  <mat-card-content>\n      <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n\n          <!--- Note that these columns can be defined in any order.\n              The actual rendered columns are set as a property on the row definition\" -->\n      \n          <!-- id Column -->\n          <ng-container matColumnDef=\"id\">\n              <th mat-header-cell *matHeaderCellDef>ID</th>\n              <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n          </ng-container>\n\n          <!-- name Column -->\n          <ng-container matColumnDef=\"name\">\n              <th mat-header-cell *matHeaderCellDef>名前</th>\n              <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n          </ng-container>\n\n          <!-- idm Column -->\n          <ng-container matColumnDef=\"idm\">\n              <th mat-header-cell *matHeaderCellDef>IDm</th>\n              <td mat-cell *matCellDef=\"let element\"> {{element.idm}} </td>\n          </ng-container>\n\n          <!-- enable Column -->\n          <ng-container matColumnDef=\"enable\">\n              <th mat-header-cell *matHeaderCellDef>有効/無効</th>\n              <td mat-cell *matCellDef=\"let element\">\n                <span *ngIf=\"element.enable=='有効'\" style=\"color: green;\">{{element.enable}}</span>\n                <span *ngIf=\"element.enable=='無効'\" style=\"color: red;\">{{element.enable}}</span>\n              </td>\n          </ng-container>\n\n          <!-- expire Column -->\n          <ng-container matColumnDef=\"expire\">\n              <th mat-header-cell *matHeaderCellDef>有効期限</th>\n              <td mat-cell *matCellDef=\"let element\"> {{element.expire}} </td>\n          </ng-container>\n\n          <!-- remark Column -->\n          <ng-container matColumnDef=\"remark\">\n              <th mat-header-cell *matHeaderCellDef>備考</th>\n              <td mat-cell *matCellDef=\"let element\"> {{element.remark}}</td>\n          </ng-container>\n\n          <!-- edit Column -->\n          <ng-container matColumnDef=\"edit\">\n              <th mat-header-cell *matHeaderCellDef>編集</th>\n              <td mat-cell *matCellDef=\"let element\">\n                  <button mat-icon-button color=\"primary\" (click)=\"onEdit(element.idm)\">\n                      <mat-icon>edit</mat-icon>\n                  </button> \n              </td>\n          </ng-container>\n\n      \n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n      </table>\n  </mat-card-content>\n</mat-card>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!--\n\n<div class=\"mainArea\">\n    <div class=\"button1\">\n      <span class=\"col-1\" style=\"display: inline-block; width: 800px\">Reading a FeliCa Card (ICS-E008/10 : Sample 5 Format)</span>\n      <button id=\"FeliCa\" (click)=\"felica_card()\">Execute</button>\n    </div>\n    <br><br>\n    <div class=\"detect\">\n      <div id=\"detect-title\" class=\"detect-title\" style=\"display: inline;\"></div><br>\n      <div id=\"detect\" class=\"detect-info\" style=\"display: inline;\"></div>\n    </div>\n    <br>\n    <div class=\"communicate\">\n      <div id=\"communicate-title\" class=\"communicate-title\" style=\"display: inline;\"></div><br>\n      <div id=\"communicate\" class=\"communicate-response\" style=\"display: inline;\"></div>\n    </div>\n  </div>-->","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { DbService } from '../db.service';\nimport { user } from '../models/user';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  user: user = {\n    email: '',\n    password: ''\n  };\n\n  form!: FormGroup;\n  emailControl = new FormControl(null, [\n    Validators.required,\n    Validators.email\n  ]);\n  passwordControl = new FormControl(null, Validators.required);\n  password2Control = new FormControl(null, Validators.required);\n\n  constructor(\n    private dbService: DbService,\n    private fb: FormBuilder,\n    private router: Router,\n    private authService: AuthService,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      email: this.emailControl,\n      password: this.passwordControl,\n      password2: this.password2Control\n    });\n  }\n\n  onSubmit() {\n    this.user.email = this.form.get('email')?.value; \n    this.user.password = this.form.get('password')?.value;\n    if(this.user.password !== this.form.get('password2')?.value){\n      this.snackBar.open('パスワードが一致していません', '閉じる', { duration: 5000 });\n      //this.form.get('password')?.setValue(null);\n      this.form.get('password2')?.setValue(null);\n      return;\n    }\n    else{\n      this.dbService.userExist(this.user.email)\n      .subscribe(exist => {\n        if(exist){\n          this.snackBar.open('同アドレスは既に登録済みです', '閉じる', { duration: 5000 });\n          //this.router.navigate(['login']);\n        }\n        else{\n          this.dbService.createUser(this.user)\n          .subscribe(() => {\n            this.authService.login(this.user)\n            .subscribe(result => {\n              if(result){\n                this.router.navigate(['home']);\n              }\n              else{\n                //\n              }\n            });\n          });\n        }\n      });\n    }\n  }\n\n}\n","<div class=\"login-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n    <mat-card class=\"box\">\n      <p class=\"img_logo\"></p>\n      <mat-card-header>\n        <mat-card-title>DDLDoor</mat-card-title>\n      </mat-card-header>\n  \n      <form class=\"example-form\" [formGroup]=\"form\" novalidate (ngSubmit)=\"onSubmit()\">\n  \n        <mat-card-content>\n\n          <mat-form-field class=\"example-full-width\">\n            <input matInput placeholder=\"メールアドレス\" type=\"email\" name=\"email\" formControlName=\"email\">\n            <mat-error *ngIf=\"emailControl.hasError('required') || emailControl.hasError('email')\">\n                <strong>メールアドレスを入力してください</strong>\n            </mat-error>\n          </mat-form-field>\n  \n          <mat-form-field class=\"example-full-width\">\n            <input matInput placeholder=\"パスワード\" type=\"password\" name=\"password\" formControlName=\"password\" autocomplete=\"off\">\n            <mat-error *ngIf=\"passwordControl.hasError('required')\">\n                <strong>パスワードを入力してください</strong>\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field class=\"example-full-width\">\n            <input matInput placeholder=\"パスワード(確認)\" type=\"password\" name=\"password2\" formControlName=\"password2\" autocomplete=\"off\">\n            <mat-error *ngIf=\"password2Control.hasError('required')\">\n                <strong>パスワード(確認)を入力してください</strong>\n            </mat-error>\n          </mat-form-field>\n  \n        </mat-card-content>\n        <!--<span fxLayout=\"row\" fxLayoutAlign=\"space-between center\">-->\n          <!--<a mat-button routerLink=\"/login\" routerLinkActive=\"active\">ログインへ</a>-->\n          <button mat-raised-button class=\"btn-block\" color=\"accent\" type=\"submit\" [disabled]=\"form.invalid\">新規登録</button>\n        <!--</span>-->\n      </form>\n    </mat-card>\n  </div>\n\n","import { Component, OnInit } from '@angular/core';\nimport { DbService } from '../db.service';\nimport { member } from '../models/member';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nexport interface displayData {\n  id: number,\n  content: string\n}\n\n@Component({\n  selector: 'app-status-list',\n  templateUrl: './status-list.component.html',\n  styleUrls: ['./status-list.component.scss']\n})\nexport class StatusListComponent implements OnInit {\n  displayedColumnsIni: string[] = [\n    'id',\n    'content'\n  ];\n  dataSourceIni = new MatTableDataSource<displayData>();\n  displayedColumnsAtt: string[] = [\n    'id',\n    'name'\n  ];\n  dataSourceAtt = new MatTableDataSource<displayData>();\n  displayedColumnsAbs: string[] = [\n    'id',\n    'name'\n  ];\n  dataSourceAbs = new MatTableDataSource<displayData>();\n\n\n  constructor(\n    private dbService: DbService,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit(): void {\n    this.getMembers();\n  }\n\n  getMembers(): void {\n    this.dbService.getAll<member>('members')\n    .subscribe(members=> {\n      if(members.length === 0){\n        this.snackBar.open('データがありませんでした', '閉じる', {duration: 7000});\n        return;\n      }\n      let displayedMembersIni: displayData[] = [];\n      let displayedMembersAtt: displayData[] = [];\n      let displayedMembersAbs: displayData[] = [];\n      members.forEach(member => {\n        if(member.initial){\n          displayedMembersIni.push({\n            id: member.id,\n            content: `${member.name}さんは初期状態となっています`\n          });\n        }\n        else{\n          if(member.attendance){\n            displayedMembersAtt.push({\n              id: member.id,\n              content: member.name\n            });\n          }\n          else{\n            displayedMembersAbs.push({\n              id: member.id,\n              content: member.name\n            });\n          }\n        }\n      });\n      this.dataSourceIni.data = displayedMembersIni;\n      this.dataSourceAtt.data = displayedMembersAtt;\n      this.dataSourceAbs.data = displayedMembersAbs;\n    });\n  }\n\n  onRefresh(): void {\n    this.ngOnInit();\n  }\n}\n","<mat-card class=\"data-card\">\n    <mat-card-header class=\"header\">\n        <mat-card-title>在外室一覧</mat-card-title>\n        <span fxLayout=\"row\" fxFlexOffset=\"auto\">\n            <button mat-icon-button color=\"accent\" (click)=\"onRefresh()\"><mat-icon class=\"refresh-icon\">refresh</mat-icon></button>\n        </span>\n    </mat-card-header>\n    <mat-card-content>\n        <div flexLayout=\"row\" fxLayoutAlign=\"space-between\" fxLayoutGap=\"20px\">\n            <div class=\"full-width\">\n            <table mat-table [dataSource]=\"dataSourceIni\" class=\"mat-elevation-z8\">\n\n                <!--- Note that these columns can be defined in any order.\n                    The actual rendered columns are set as a property on the row definition\" -->\n            \n                <!-- id Column -->\n                <ng-container matColumnDef=\"id\">\n                    <th mat-header-cell *matHeaderCellDef>ID</th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n                </ng-container>\n\n                <!-- name Column -->\n                <ng-container matColumnDef=\"content\">\n                    <th mat-header-cell *matHeaderCellDef>内容</th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.content}} </td>\n                </ng-container>\n            \n                <tr mat-header-row *matHeaderRowDef=\"displayedColumnsIni\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumnsIni;\"></tr>\n            </table>\n            </div>\n\n            <div class=\"full-width\">\n            <table mat-table [dataSource]=\"dataSourceAtt\" class=\"mat-elevation-z8\">\n\n                <!--- Note that these columns can be defined in any order.\n                    The actual rendered columns are set as a property on the row definition\" -->\n            \n                <!-- id Column -->\n                <ng-container matColumnDef=\"id\">\n                    <th mat-header-cell *matHeaderCellDef>ID</th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n                </ng-container>\n\n                <!-- name Column -->\n                <ng-container matColumnDef=\"name\">\n                    <th mat-header-cell *matHeaderCellDef>在室者</th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.content}} </td>\n                </ng-container>\n            \n                <tr mat-header-row *matHeaderRowDef=\"displayedColumnsAtt\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumnsAtt;\"></tr>\n            </table>\n            </div>\n\n            <div class=\"full-width\">\n            <table mat-table [dataSource]=\"dataSourceAbs\" class=\"mat-elevation-z8\">\n\n                <!--- Note that these columns can be defined in any order.\n                    The actual rendered columns are set as a property on the row definition\" -->\n            \n                <!-- id Column -->\n                <ng-container matColumnDef=\"id\">\n                    <th mat-header-cell *matHeaderCellDef>ID</th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n                </ng-container>\n\n                <!-- name Column -->\n                <ng-container matColumnDef=\"name\">\n                    <th mat-header-cell *matHeaderCellDef>外室者</th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.content}} </td>\n                </ng-container>\n            \n                <tr mat-header-row *matHeaderRowDef=\"displayedColumnsAbs\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumnsAbs;\"></tr>\n            </table>\n            </div>\n        </div>\n    </mat-card-content>\n</mat-card>\n  \n\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":["Validators","FormControl","NFCPortLib","Configuration","DetectionOption","i0","CardDialogComponent","constructor","dialogRef","fb","dbService","snackBar","idm","id","enable","expire","remark","required","ngOnInit","getMembers","form","group","idmControl","idControl","enableControl","remarkControl","getAll","subscribe","members","onCancel","terminate","close","onSubmit","card","get","_a","value","_b","_c","now","Date","setFullYear","getFullYear","toString","add","result","open","duration","onScan","scanStatus","felica_card","then","console","log","lib","config","init","deviceName","detectOption","Uint8Array","detectCard","ret","systemCode","_array_tohexs","pmm","targetCardBaudRate","error","errorType","message","_def_val","param","def","undefined","_array_slice","array","offset","length","_array_copy","_bytes2hexs","bytes","sep","str","str_num","map","byte","join","toUpperCase","temp","offset2","length2","dest","dest_offset","src","src_offset","idx","src_offset2","selectors","decls","vars","consts","template","ctx","Breakpoints","shareReplay","_r0","NaviComponent","breakpointObserver","authService","router","observe","Handset","pipe","matches","onLogout","logout","navigate","ngContentSelectors"],"sourceRoot":"webpack:///"}